const countingScheme = require("../../Models/Noitu");
const fs = require("fs");
const path = require("path");

const DICTIONARY_PATH = path.join(__dirname, "../../tudien.txt");
const MAX_SUGGESTIONS = 10;
const COMMANDS = ["!gg", "!dauhang", "!thua", "!reset"];
const SUCCESS_MESSAGES = [
  "Nice try! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c t·ª´ sau ƒë·ªÉ n·ªëi: ",
  "G√† qu√°, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c t·ª´ nh∆∞ ",
  "Ti·∫øng Vi·ªát b·∫°n k√©m qu√°, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c t·ª´ nh∆∞ "
];
const FAIL_MESSAGES = [
  "T√¥i b√≥ tay, kh√¥ng t√¨m th·∫•y t·ª´ n√†o ph√π h·ª£p ƒë·ªÉ n·ªëi",
  "Kh√≥ qu√° nh·ªâ, t√¥i c≈©ng kh√¥ng t√¨m ƒë∆∞·ª£c t·ª´ n√†o ph√π h·ª£p",
  "H√£y b·∫Øt ƒë·∫ßu l·∫°i v·ªõi m·ªôt t·ª´ d·ªÖ h∆°n n√†o!"
];

let usedWords = {};
let playerUsedWords = {};
let lastUsedWord = null;
let isValidLastWord = true;

const vietnameseWords = loadVietnameseWords(DICTIONARY_PATH);

function loadVietnameseWords(filePath) {
  if (!fs.existsSync(filePath)) {
    process.exit(1);
  }
  const data = fs.readFileSync(filePath, "utf-8").split("\n");
  return data
    .map(line => {
      try {
        return JSON.parse(line).text.toLowerCase();
      } catch {
        return null;
      }
    })
    .filter(word => word);
}

async function checkValidWord(word) {
  return vietnameseWords.includes(word) && word.split(" ").length === 2 && isValidLastWord;
}

function selectRandomWords(words, count) {
  const shuffled = [...words].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function generateReplyForWordSelection(words) {
  if (words.length > 0) {
    const message = "`" + words.join("`, `") + "`";
    return `${SUCCESS_MESSAGES[Math.floor(Math.random() * SUCCESS_MESSAGES.length)]}${message}`;
  } else {
    return FAIL_MESSAGES[Math.floor(Math.random() * FAIL_MESSAGES.length)];
  }
}

// S·ª≠a l·ªói ·ªü ƒë√¢y: ƒê·ªïi t√™n h√†m ƒë·ªÉ tr√°nh xung ƒë·ªôt
async function checkIsValidLastWord(word) {
  // Gi·∫£ s·ª≠ r·∫±ng m·ªçi t·ª´ ƒë·ªÅu h·ª£p l·ªá, thay th·∫ø logic n√†y b·∫±ng logic ki·ªÉm tra th·ª±c t·∫ø c·ªßa b·∫°n
  return true;
}

// Ph·∫ßn c√≤n l·∫°i c·ªßa m√£ gi·ªØ nguy√™n
module.exports = {
  name: "messageCreate",

  async execute(message) {
    try {
      if (message.author.bot || !await isValidChannel(message)) return;

      const word = message.content.trim().toLowerCase();

      // S·ª≠a l·ªói: Thay ƒë·ªïi t√™n h√†m sang checkIsValidLastWord
      if (!COMMANDS.includes(word) && !await checkIsValidLastWord(word)) {
        handleInvalidWord(message, word);
        return;
      }

      // Ki·ªÉm tra xem tin nh·∫Øn c√≥ n√™n b·ªã b·ªè qua kh√¥ng
      if (shouldIgnoreMessage(word)) {
        message.delete();
        return;
      }

      // X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
      if (COMMANDS.includes(word)) {
        handleCommand(message, word);
        return;
      }

      // Sau ƒë√≥, ki·ªÉm tra t·ª´ h·ª£p l·ªá
      if (await checkValidWord(word)) {
        handleValidWord(message, word);
      } else {
        handleInvalidWord(message, word);
      }
    } catch (error) {
      console.error("C√≥ l·ªói x·∫£y ra: ", error);
    }
  },
};

async function isValidChannel(message) {
  const setupData = await countingScheme.findOne({ GuildID: message.guild.id });
  return setupData && message.channel.id === setupData.Channel;
}

function shouldIgnoreMessage(word) {
  const emojiRegex = /<:[a-zA-Z0-9_]+:[0-9]+>/g;
  return emojiRegex.test(word) || word.split(" ").length > 2;
}

function handleCommand(message, word) {
  // Ki·ªÉm tra n·∫øu lastUsedWord l√† null ho·∫∑c undefined
  if (!lastUsedWord && word !== "!reset") {
    message.reply("Ch∆∞a c√≥ t·ª´ n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
    return;
  }

  // X·ª≠ l√Ω c√°c l·ªánh
  switch (word) {
    case "!reset":
      resetGameState();
      message.reply("Tr√≤ ch∆°i ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i.");
      break;
    default:
      const lastWordBeforeGG = lastUsedWord.split(" ").pop();
      const possibleWords = vietnameseWords.filter(vWord => vWord.startsWith(lastWordBeforeGG) && !usedWords[vWord] && vWord.split(" ").length === 2);
      const selectedWords = selectRandomWords(possibleWords, MAX_SUGGESTIONS);
      message.reply(generateReplyForWordSelection(selectedWords));
      break;
  }
}

function handleValidWord(message, word) {
  const words = word.split(" ");
  if (words.length === 2 && words[0] === words[1]) {
    message.reply("Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ª´ l√°y to√†n b·ªô üëé");
    isValidLastWord = false;
    return;
  }

  playerUsedWords[word] = true;
  lastUsedWord = word; // C·∫≠p nh·∫≠t lastUsedWord khi t·ª´ h·ª£p l·ªá
  isValidLastWord = true;
  setTimeout(() => replyWithBotWord(message, word), 1000);
}

function handleInvalidWord(message, word) {
  message.reply(`T·ª´ \`${word}\` kh√¥ng c√≥ trong t·ª´ ƒëi·ªÉn, vui l√≤ng ch·ªçn t·ª´ kh√°c`);
  isValidLastWord = false;
}

function replyWithBotWord(message, word) {
  const lastWord = word.split(" ").pop();
  const possibleWords = vietnameseWords.filter(vWord => vWord.startsWith(lastWord) && !usedWords[vWord] && vWord.split(" ").length === 2);
  if (possibleWords.length > 0) {
    const nextWord = possibleWords[Math.floor(Math.random() * possibleWords.length)];
    message.reply(nextWord);
    usedWords[nextWord] = true;
    lastUsedWord = nextWord; // C·∫≠p nh·∫≠t lastUsedWord v·ªõi t·ª´ c·ªßa bot
  } else {
    message.reply("T√¥i ƒë·∫ßu h√†ng.");
    resetGameState();
  }
}

function resetGameState() {
  usedWords = {};
  playerUsedWords = {};
  lastUsedWord = null;
  isValidLastWord = true;
}