const countingScheme = require("../../Models/Counting");
const Ranking = require("../../Models/Ranking");
const math = require("mathjs");

module.exports = {
    name: "messageCreate",

    async execute(message) {
        const guildId = message.guild.id;

        if (message.author.bot) return;

        // Updated regex to better capture expressions with parentheses and exponentiation
        const isMathExpression = /^[\d\(\)\^]+(\s*[\+\-\*\/\^]\s*[\d\(\)\^]+)*$/.test(message.content);

        countingScheme.findOne({ GuildID: guildId }, async (err, data) => {
            if (!data || !data.Channel || !isMathExpression) return;

            if (message.channel.id === data.Channel) {
                if (!data.isNumberEntered) {
                    try {
                        if (data.LastPerson === message.author.id) {
                            // Ng∆∞·ªùi ch∆°i ƒë√£ nh·∫≠p s·ªë trong l∆∞·ª£t hi·ªán t·∫°i
                            // Th√™m react ‚ùå
                            message.react("<a:cerberusbap:1179405311933685880>");

                            // G·ª≠i th√¥ng b√°o m·ªõi
                            message.channel.send(`B·∫°n ƒë√£ ch∆°i kh√¥ng ƒë√∫ng lu·∫≠t, <@${message.author.id}>! B·∫°n ch·ªâ c√≥ th·ªÉ nh·∫≠p m·ªôt s·ªë trong c√πng m·ªôt l∆∞·ª£t ch∆°i`);

                            // Reset l·∫°i tr√≤ ch∆°i
                            data.Count = 1;
                            data.isNumberEntered = false;
                            data.LastPerson = "";
                        } else {
                            // T·∫°o m·ªôt h√†m x·ª≠ l√Ω d·∫•u '^'
                            const processExponentiation = (expr) => {
                                return expr.replace(/\^/g, (match, offset, str) => {
                                    const prevChar = str[offset - 1];
                                    const nextChar = str[offset + 1];

                                    if (prevChar === ')' && nextChar === '(') {
                                        // N·∫øu c√≥ '^' gi·ªØa hai d·∫•u ngo·∫∑c, th√¨ thay th·∫ø b·∫±ng '**'
                                        return '**';
                                    } else {
                                        // Ng∆∞·ª£c l·∫°i, gi·ªØ nguy√™n '^'
                                        return match;
                                    }
                                });
                            };

                            // √Åp d·ª•ng h√†m x·ª≠ l√Ω cho bi·ªÉu th·ª©c
                            const processedExpression = processExponentiation(message.content);

                            const result = math.evaluate(processedExpression);

                            // Ki·ªÉm tra n·∫øu k·∫øt qu·∫£ l√† s·ªë h·ª£p l·ªá (finite v√† l√† s·ªë nguy√™n)
                            if (!isNaN(result) && isFinite(result) && result === Math.floor(result)) {
                                if (result === data.Count) {
                                    message.react("<:PinkCheck:1179406997997748336>");
                                    data.Count++;
                                    data.isNumberEntered = true;
                                } else if (result === 100 && data.Count === 100) {
                                    message.react("üíØ");
                                    data.Count = 1;
                                    data.isNumberEntered = false;
                                } else {
                                    // Th√™m react ‚ùå
                                    message.react("<a:cerberusbap:1179405311933685880>");

                                    // G·ª≠i th√¥ng b√°o m·ªõi
                                    message.channel.send(`ƒê√£ ph√° h·ªèng chu·ªói ·ªü s·ªë **${data.Count}**! B·∫Øt ƒë·∫ßu l·∫°i t·ª´ s·ªë: \`1\` `);

                                    // Reset l·∫°i tr√≤ ch∆°i
                                    data.Count = 1;
                                    data.isNumberEntered = true; // ƒê·∫∑t th√†nh true khi s·ªë ƒë√£ ƒë∆∞·ª£c nh·∫≠p
                                }

                                const userRanking = await Ranking.findOne({ userId: message.author.id });

                                if (userRanking) {
                                    userRanking.correctCount++;
                                } else {
                                    await Ranking.create({ userId: message.author.id, correctCount: 1 });
                                }

                                data.LastPerson = message.author.id;
                            } else {
                                // N·∫øu k·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá, th√¥ng b√°o v√† kh√¥ng tƒÉng Count
                                message.react("<a:cerberusbap:1179405311933685880>");
                                message.channel.send(`K·∫øt qu·∫£ \`${result}\` kh√¥ng h·ª£p l·ªá, <@${message.author.id}>! H√£y nh·∫≠p m·ªôt ph√©p t√≠nh h·ª£p l·ªá.`);

                                // Reset l·∫°i tr√≤ ch∆°i
                                data.Count = 1;
                                data.isNumberEntered = true; // ƒê·∫∑t th√†nh true khi s·ªë ƒë√£ ƒë∆∞·ª£c nh·∫≠p
                                data.LastPerson = "";
                            }
                        }
                    } catch (error) {
                        console.error(error);
                    } finally {
                        // Save data after processing
                        await data.save(); // L∆∞u d·ªØ li·ªáu sau m·ªói l∆∞·ª£t ch∆°i
                    }
                } else {
                    // Ng∆∞·ªùi ch∆°i ƒë√£ nh·∫≠p s·ªë trong l∆∞·ª£t hi·ªán t·∫°i
                    // Th√™m react ‚ùå
                    message.react("<a:cerberusbap:1179405311933685880>");

                    // G·ª≠i th√¥ng b√°o m·ªõi
                    message.channel.send(`B·∫°n ƒë√£ ch∆°i kh√¥ng ƒë√∫ng lu·∫≠t, <@${message.author.id}>! B·∫°n ch·ªâ c√≥ th·ªÉ nh·∫≠p m·ªôt s·ªë trong c√πng m·ªôt l∆∞·ª£t ch∆°i`);
                }
            }
        });
    },
};
