const {
    Client,
    ChatInputCommandInteraction,
    EmbedBuilder,
    SlashCommandBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ComponentType,
} = require("discord.js");
const {
    TwoZeroFourEight,
    FastType,
    FindEmoji,
    Flood,
    GuessThePokemon,
    Hangman,
    MatchPairs,
    Minesweeper,
    Slots,
    Snake,
    Trivia,
    Wordle,
    WouldYouRather
} = require('discord-gamecord');
const ms = require("ms");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("games-singleplayer")
        .setDescription("Ch∆°i m·ªôt tr√≤ ch∆°i ƒë∆°n trong m√°y ch·ªß.")
        .addStringOption(option =>
            option.setName("game")
                .setDescription("*Ch·ªçn m·ªôt tr√≤ ch∆°i ƒë·ªÉ ch∆°i.")
                .setRequired(true)
                .addChoices(
                    { name: "2048", value: "2048" },
                    { name: "Chat nhanh", value: "fasttype" },
                    { name: "T√¨m Emoji", value: "findemoji" },
                    { name: "Flood", value: "flood" },
                    { name: "ƒêo√°n t√™n Pokemon", value: "guessthepokemon" },
                    { name: "Ng∆∞·ªùi treo c·ªï", value: "hangman" },
                    { name: "Gh√©p c·∫∑p", value: "matchpairs" },
                    { name: "D√≤ m√¨n", value: "minesweeper" },
                    { name: "O·∫≥n t√π t√¨", value: "rps" },
                    { name: "Slots", value: "slots" },
                    { name: "Snake", value: "snake" },
                )
        )
        .setDMPermission(false),
    /**
     * @param {Client} client
     * @param {ChatInputCommandInteraction} interaction
     */
    async execute(interaction) {
        const allowedChannelId = '1181147913703936021';

        if (interaction.channelId !== allowedChannelId) {
            const allowedChannel = interaction.guild.channels.cache.get(allowedChannelId);
            const channelMention = `<#${allowedChannel.id}>`;

            return interaction.reply({
                content: `B·∫°n ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y trong ${channelMention}.`,
                ephemeral: true,
            });
        }


        const game = interaction.options.getString("game");

        switch (game) {
            case "2048": {
                const Game = new TwoZeroFourEight({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: '2048',
                        color: '#2f3136'
                    },
                    emojis: {
                        up: '‚¨ÜÔ∏è',
                        down: '‚¨áÔ∏è',
                        left: '‚¨ÖÔ∏è',
                        right: '‚û°Ô∏è',
                    },
                    timeoutTime: 60000,
                    buttonStyle: 'PRIMARY',
                    playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                    if (result.result === 'lose') {
                        interaction.editReply({
                            embeds: [
                                new EmbedBuilder()
                                    .setColor('#ff0000')  // M√†u ƒë·ªè
                                    .setTitle('2048 - Game Over')
                                    .setDescription(`:cry: B·∫°n ƒë√£ thua cu·ªôc! ƒêi·ªÉm c·ªßa b·∫°n l√† ${result.score}.`)
                            ],
                            components: []  // X√≥a c√°c th√†nh ph·∫ßn (n√∫t) n·∫øu c√≥
                        });
                    }
                });
            }
                break;
            case "fasttype": {
                const Game = new FastType({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'Chat nhanh',
                        color: '0xECB2FB',
                        description: 'B·∫°n c√≥ {time} gi√¢y ƒë·ªÉ g√µ c√¢u sau ƒë√¢y.'
                    },
                    timeoutTime: 60000,
                    sentence: 'M·ªôt c√¢u r·∫•t hay ƒë·ªÉ g√µ nhanh.',
                    winMessage: 'B·∫°n ƒë√£ th·∫Øng! B·∫°n ƒë√£ ho√†n th√†nh ƒëua g√µ trong {time} gi√¢y v·ªõi t·ªëc ƒë·ªô {wpm} t·ª´ m·ªói ph√∫t.',
                    loseMessage: 'B·∫°n ƒë√£ thua! B·∫°n kh√¥ng g√µ ƒë√∫ng c√¢u trong th·ªùi gian cho ph√©p.',
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                    if (result.result === 'lose') {
                        interaction.editReply({
                            embeds: [
                                new EmbedBuilder()
                                    .setColor(0xECB2FB)  // M√†u ƒë·ªè
                                    .setTitle('Chat nhanh - Game Over')
                                    .setDescription(`:cry: B·∫°n ƒë√£ thua cu·ªôc!`)
                            ],
                            components: []  // X√≥a c√°c th√†nh ph·∫ßn (n√∫t) n·∫øu c√≥
                        });
                    }
                });
            }
                break;
            case "findemoji": {
                const Game = new FindEmoji({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'T√¨m Emoji',
                        color: '#2f3136',
                        description: 'Nh·ªõ c√°c bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c t·ª´ b·∫£ng d∆∞·ªõi ƒë√¢y.',
                        findDescription: 'T√¨m bi·ªÉu t∆∞·ª£ng {emoji} tr∆∞·ªõc khi h·∫øt th·ªùi gian.'
                    },
                    timeoutTime: 60000,
                    hideEmojiTime: 5000,
                    buttonStyle: 'PRIMARY',
                    emojis: ['üçâ', 'üçá', 'üçä', 'üçã', 'ü•≠', 'üçé', 'üçè', 'ü•ù'],
                    winMessage: 'Chi·∫øn th·∫Øng! B·∫°n ƒë√£ ch·ªçn ƒë√∫ng bi·ªÉu t∆∞·ª£ng. {emoji}',
                    loseMessage: 'Thua cu·ªôc! B·∫°n ƒë√£ ch·ªçn sai bi·ªÉu t∆∞·ª£ng. {emoji}',
                    timeoutMessage: 'Thua cu·ªôc! B·∫°n ƒë√£ h·∫øt th·ªùi gian. Bi·ªÉu t∆∞·ª£ng l√† {emoji}',
                    playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                    if (result.result === 'lose') {
                        interaction.editReply({
                            embeds: [
                                new EmbedBuilder()
                                    .setColor(0xECB2FB)  // M√†u ƒë·ªè
                                    .setTitle('T√¨m Emoji - Game Over')
                                    .setDescription(`:cry: B·∫°n ƒë√£ thua cu·ªôc!`)
                            ],
                            components: []  // X√≥a c√°c th√†nh ph·∫ßn (n√∫t) n·∫øu c√≥
                        });
                    }
                });
            }
                break;
            case "flood": {
                const Game = new Flood({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'Flood',
                        color: '#2f3136',
                    },
                    difficulty: 13,
                    timeoutTime: 60000,
                    buttonStyle: 'PRIMARY',
                    emojis: ['üü•', 'üü¶', 'üüß', 'üü™', 'üü©'],
                    winMessage: 'B·∫°n ƒë√£ th·∫Øng! B·∫°n ƒë√£ th·ª±c hi·ªán **{turns}** l∆∞·ª£t.',
                    loseMessage: 'B·∫°n ƒë√£ thua! B·∫°n ƒë√£ th·ª±c hi·ªán **{turns}** l∆∞·ª£t.',
                    playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                });
            }
                break;
            case "guessthepokemon": {
                const Game = new GuessThePokemon({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'ƒêo√°n t√™n\ Pokemon',
                        color: '#2f3136'
                    },
                    timeoutTime: 15000,
                    winMessage: 'B·∫°n ƒë√£ ƒëo√°n ƒë√∫ng! ƒê√≥ l√† m·ªôt con {pokemon}.',
                    loseMessage: 'Ch√∫c may m·∫Øn l·∫ßn sau! ƒê√≥ l√† m·ªôt con {pokemon}.',
                    errMessage: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu pokemon! Vui l√≤ng th·ª≠ l·∫°i.',
                    playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                });
            }
                break;
                case "hangman": {
                    const themes = [
                        "thi√™n nhi√™n",
                        "th·ªÉ thao",
                        "m√†u s·∫Øc",
                        "c·∫Øm tr·∫°i",
                        "tr√°i c√¢y",
                        "discord",
                        "m√πa ƒë√¥ng",
                        "pokemon"
                    ];
                
                    const chosenTheme = themes[Math.floor(Math.random() * themes.length)];
                
                    // Define themeWords based on the chosen theme
                    let themeWords;
                    switch (chosenTheme) {
                        case "thi√™n nhi√™n":
                            themeWords = ["tree", "flower", "river", "mountain"];
                            break;
                        // Add more cases for other themes as needed
                
                        default:
                            themeWords = ["default", "fallback", "words"];
                            break;
                    }
                
                    // Check if themeWords is defined and not empty
                    if (!themeWords || themeWords.length === 0) {
                        console.error(`Error: themeWords is undefined or empty for theme '${chosenTheme}'.`);
                        // Handle the error appropriately, e.g., provide a default word list
                        themeWords = ["default", "fallback", "words"];
                    }
                
                    const Game = new Hangman({
                        message: interaction,
                        slash_command: true,
                        embed: {
                            title: 'Ng∆∞·ªùi treo c·ªï',
                            color: '0xECB2FB',
                        },
                        hangman: { hat: 'üé©', head: 'üòü', shirt: 'üëï', pants: 'ü©≥', boots: 'üëûüëû' },
                        timeoutTime: 60000,
                        theme: chosenTheme,
                        themeWords: themeWords, // Pass the themeWords array
                        winMessage: 'B·∫°n ƒë√£ th·∫Øng! ƒê√°p √°n l√† **{word}**.',
                        loseMessage: 'B·∫°n ƒë√£ thua! ƒê√°p √°n l√† **{word}**.',
                        playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                    });
                
                    Game.startGame();
                    Game.on('gameOver', result => {
                        console.log(result);  // =>  { result... }
                    });
                }
                break;
            case "matchpairs": {
                const Game = new MatchPairs({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'Gh√©p c·∫∑p',
                        color: '#2f3136',
                        description: '**Nh·∫•p v√†o c√°c n√∫t ƒë·ªÉ k·∫øt h·ª£p bi·ªÉu t∆∞·ª£ng v·ªõi nhau.**'
                    },
                    timeoutTime: 60000,
                    emojis: ['üçâ', 'üçá', 'üçä', 'ü•≠', 'üçé', 'üçè', 'ü•ù', 'ü••', 'üçì', 'ü´ê', 'üçç', 'ü•ï', 'ü•î'],
                    winMessage: '**B·∫°n ƒë√£ th·∫Øng tr√≤ ch∆°i! B·∫°n ƒë√£ l·∫≠t t·ªïng c·ªông `{tilesTurned}` √¥.**',
                    loseMessage: '**B·∫°n ƒë√£ thua tr√≤ ch∆°i! B·∫°n ƒë√£ l·∫≠t t·ªïng c·ªông `{tilesTurned}` √¥.**',
                    playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                });
            }
                break;
            case "minesweeper": {
                const Game = new Minesweeper({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'D√≤ m√¨n',
                        color: '#2f3136',
                        description: 'Nh·∫•p v√†o c√°c n√∫t ƒë·ªÉ m·ªü c√°c √¥ tr·ª´ bom.'
                    },
                    emojis: { flag: 'üö©', mine: 'üí£' },
                    mines: 5,
                    timeoutTime: 60000,
                    winMessage: 'B·∫°n ƒë√£ th·∫Øng tr√≤ ch∆°i! B·∫°n ƒë√£ tr√°nh th√†nh c√¥ng t·∫•t c·∫£ bom.',
                    loseMessage: 'B·∫°n ƒë√£ thua tr√≤ ch∆°i! H√£y ch√∫ √Ω ƒë·∫øn bom l·∫ßn sau.',
                    playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                });
            }
                break;
            case "rps": {
                let choices = ["rock", "paper", "scissor"]
                const botchoice = `${choices[(Math.floor(Math.random() * choices.length))]}`
                console.log(`Bot ƒë√£ ch·ªçn ${botchoice}`)

                const Embed = new EmbedBuilder()
                    .setColor(0xECB2FB)
                    .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                    .setDescription(`<@${interaction.member.id}> h√£y ch·ªçn ƒë·ªông t√°c c·ªßa b·∫°n.`)

                const row = new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setStyle(ButtonStyle.Primary)
                        .setCustomId("rock")
                        .setLabel("ƒê·∫•m")
                        .setEmoji(`‚úä`),
                    new ButtonBuilder()
                        .setStyle(ButtonStyle.Primary)
                        .setCustomId("paper")
                        .setLabel("Gi·∫•y")
                        .setEmoji(`‚úã`),
                    new ButtonBuilder()
                        .setStyle(ButtonStyle.Primary)
                        .setCustomId("scissor")
                        .setLabel("K√©o")
                        .setEmoji(`‚úå`),
                )

                const Page = await interaction.reply({
                    embeds: [Embed],
                    components: [row]
                })
                const col = Page.createMessageComponentCollector({
                    componentType: ComponentType.Button,
                    time: ms("10s")
                })
                col.on("collect", i => {

                    switch (i.customId) {

                        case "rock": {

                            if (botchoice == "rock") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`H√≤a\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "ƒê√°", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "ƒê√°", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }

                            if (botchoice == "paper") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`B·∫°n ƒë√£ thua tr√≤ ch∆°i\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "ƒê√°", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "Gi·∫•y", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }
                            if (botchoice == "scissor") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`B·∫°n ƒë√£ th·∫Øng tr√≤ ch∆°i\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "ƒê√°", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "K√©o", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }
                        }
                            break;
                        case "paper": {
                            if (botchoice == "rock") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`B·∫°n ƒë√£ th·∫Øng tr√≤ ch∆°i\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "Gi·∫•y", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "ƒê√°", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }

                            if (botchoice == "paper") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`H√≤a\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "Gi·∫•y", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "Gi·∫•y", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }
                            if (botchoice == "scissor") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`B·∫°n ƒë√£ thua tr√≤ ch∆°i\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "Gi·∫•y", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "K√©o", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }
                        }
                            break;

                        case "scissor": {

                            if (botchoice == "rock") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`B·∫°n ƒë√£ thua tr√≤ ch∆°i\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "K√©o", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "ƒê√°", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }

                            if (botchoice == "paper") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`B·∫°n ƒë√£ th·∫Øng tr√≤ ch∆°i\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "K√©o", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "Gi·∫•y", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }
                            if (botchoice == "scissor") {

                                return interaction.editReply({
                                    embeds: [
                                        new EmbedBuilder()
                                            .setColor(0xECB2FB)
                                            .setAuthor({ name: "Tr√≤ ch∆°i O·∫≥n t√π t√¨", iconURL: interaction.member.displayAvatarURL() })
                                            .setDescription(`\`\`\`H√≤a\`\`\``)
                                            .addFields(
                                                { name: "L·ª±a ch·ªçn c·ªßa b·∫°n", value: "K√©o", inline: true },
                                                { name: "L·ª±a ch·ªçn c·ªßa t√¥i", value: "K√©o", inline: true }
                                            )
                                    ],
                                    components: []
                                })
                            }
                        }
                            break;
                    }
                })
                col.on("end", (collected) => {

                    if (collected.size > 0) return

                    interaction.editReply({
                        embeds: [
                            Embed.setDescription(`:warning: | B·∫°n kh√¥ng ch·ªçn n∆∞·ªõc ƒëi c·ªßa m√¨nh.`).setColor("0x2f3136")
                        ],
                        components: []
                    })
                })
            }
                break;
            case "slots": {
                const Game = new Slots({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'M√°y ƒë√°nh b·∫°c',
                        color: '#2f3136'
                    },
                    slots: ['üçá', 'üçä', 'üçã', 'üçå']
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                });
            }
                break;
            case "snake": {
                const Game = new Snake({
                    message: interaction,
                    slash_command: true,
                    embed: {
                        title: 'Tr√≤ ch∆°i R·∫Øn',
                        overTitle: 'Game Over',
                        color: '#2f3136'
                    },
                    emojis: {
                        board: '‚¨õ',
                        food: 'üçé',
                        up: '‚¨ÜÔ∏è',
                        down: '‚¨áÔ∏è',
                        left: '‚¨ÖÔ∏è',
                        right: '‚û°Ô∏è',
                    },
                    stopButton: 'D·ª´ng',
                    timeoutTime: 60000,
                    snake: { head: 'üü¢', body: 'üü©', tail: 'üü¢', over: 'üíÄ' },
                    foods: ['üçé', 'üçá', 'üçä', 'ü´ê', 'ü•ï', 'ü•ù', 'üåΩ'],
                    playerOnlyMessage: 'Ch·ªâ {player} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c n√∫t n√†y.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                })
            }
                break;
        }
    }
}