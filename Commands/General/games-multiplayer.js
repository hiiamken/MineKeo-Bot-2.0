const {
    Client,
    ChatInputCommandInteraction,
    SlashCommandBuilder,
    EmbedBuilder,
} = require("discord.js");
const {
    Connect4,
    RockPaperScissors,
    TicTacToe,
} = require('discord-gamecord');

module.exports = {
    data: new SlashCommandBuilder()
        .setName("games-multiplayer")
        .setDescription("Ch∆°i m·ªôt tr√≤ ch∆°i nhi·ªÅu ng∆∞·ªùi ch∆°i trong m√°y ch·ªß.")
        .addStringOption(option =>
            option.setName("game")
                .setDescription("*Ch·ªçn m·ªôt tr√≤ ch∆°i ƒë·ªÉ ch∆°i.")
                .setRequired(true)
                .addChoices(
                    { name: "Connect-4", value: "connect4" },
                    { name: "O·∫≥n t√π t√¨", value: "rps" },
                    { name: "Tic-Tac-Toe", value: "tictactoe" },
                )
        )
        .addUserOption(option =>
            option.setName("user")
                .setDescription('*Ch·ªçn ƒë·ªëi th·ªß c·ªßa b·∫°n cho tr√≤ ch∆°i.')
                .setRequired(true)
        )
        .setDMPermission(false),
    /**
     * @param {Client} client
     * @param {ChatInputCommandInteraction} interaction
     */
    async execute(interaction) {

        const allowedChannelId = '1181147913703936021';

        if (interaction.channelId !== allowedChannelId) {
            const allowedChannel = interaction.guild.channels.cache.get(allowedChannelId);
            const channelMention = `<#${allowedChannel.id}>`;

            return interaction.reply({
                content: `B·∫°n ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y trong ${channelMention}.`,
                ephemeral: true,
            });
        }

        const game = interaction.options.getString("game");
        const user = interaction.options.getUser("user");

        if (!user) {
            return interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setColor(0xECB2FB)
                        .setDescription(":warning: | ƒê·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh c√≥ kh·∫£ nƒÉng ƒë√£ r·ªùi kh·ªèi m√°y ch·ªß.")
                ],
                ephemeral: true
            })
        }

        if (user.bot) {
            return interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setColor(0xECB2FB)
                        .setDescription(":warning: | B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p ch∆°i v·ªõi m·ªôt bot.")
                ],
                ephemeral: true
            })
        }

        if (user.id === interaction.user.id) {
            return interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setColor(0xECB2FB)
                        .setDescription(":warning: | B·∫°n kh√¥ng th·ªÉ ch∆°i tr√≤ ch∆°i v·ªõi ch√≠nh m√¨nh.")
                ],
                ephemeral: true
            })
        }

        switch (game) {
            case "connect4": {
                const Game = new Connect4({
                    message: interaction,
                    slash_command: true,
                    opponent: interaction.options.getUser('user'),
                    embed: {
                        title: 'Tr√≤ ch∆°i Connect4',
                        statusTitle: 'Tr·∫°ng th√°i',
                        color: '#2f3136'
                    },
                    emojis: {
                        board: '‚ö™',
                        player1: 'üî¥',
                        player2: 'üü°'
                    },
                    mentionUser: true,
                    timeoutTime: 60000,
                    buttonStyle: 'PRIMARY',
                    turnMessage: '{emoji} | L∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i **{player}**.',
                    winMessage: '{emoji} | **{player}** ƒë√£ chi·∫øn th·∫Øng tr√≤ ch∆°i Connect4.',
                    tieMessage: 'Tr√≤ ch∆°i h√≤a! Kh√¥ng ai chi·∫øn th·∫Øng tr√≤ ch∆°i!',
                    timeoutMessage: 'Tr√≤ ch∆°i kh√¥ng ho√†n th√†nh! Kh√¥ng ai chi·∫øn th·∫Øng tr√≤ ch∆°i!',
                    playerOnlyMessage: 'Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y cho {player} v√† {opponent}.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                });
            }
                break;
            case "rps": {
                const Game = new RockPaperScissors({
                    message: interaction,
                    slash_command: true,
                    opponent: interaction.options.getUser('user'),
                    embed: {
                        title: 'O·∫≥n t√π t√¨',
                        color: '#2f3136',
                        description: 'Nh·∫•n v√†o m·ªôt n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn.'
                    },
                    buttons: {
                        rock: 'ƒê√°',
                        paper: 'Gi·∫•y',
                        scissors: 'K√©o'
                    },
                    emojis: {
                        rock: 'üåë',
                        paper: 'üì∞',
                        scissors: '‚úÇÔ∏è'
                    },
                    mentionUser: true,
                    timeoutTime: 60000,
                    buttonStyle: 'PRIMARY',
                    pickMessage: 'B·∫°n ch·ªçn {emoji}.',
                    winMessage: '**{player}** ƒë√£ chi·∫øn th·∫Øng {opponent}! Ch√∫c m·ª´ng!',
                    tieMessage: 'Tr√≤ ch∆°i h√≤a! Kh√¥ng ai chi·∫øn th·∫Øng tr√≤ ch∆°i!',
                    timeoutMessage: 'Tr√≤ ch∆°i kh√¥ng ho√†n th√†nh! Kh√¥ng ai chi·∫øn th·∫Øng tr√≤ ch∆°i!',
                    playerOnlyMessage: 'Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y cho {player} v√† {opponent}.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                });
            }
                break;
            case "tictactoe": {
                const Game = new TicTacToe({
                    message: interaction,
                    slash_command: true,
                    opponent: interaction.options.getUser('user'),
                    embed: {
                        title: 'Tic Tac Toe',
                        color: '#2f3136',
                        statusTitle: 'Tr·∫°ng th√°i',
                        overTitle: 'Tr√≤ ch∆°i k·∫øt th√∫c'
                    },
                    emojis: {
                        xButton: '‚ùå',
                        oButton: 'üîµ',
                        blankButton: '‚ûñ'
                    },
                    mentionUser: true,
                    timeoutTime: 60000,
                    xButtonStyle: 'DANGER',
                    oButtonStyle: 'PRIMARY',
                    turnMessage: '{emoji} | L∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i **{player}**.',
                    winMessage: '{emoji} | **{player}** ƒë√£ chi·∫øn th·∫Øng tr√≤ ch∆°i TicTacToe.',
                    tieMessage: 'Tr√≤ ch∆°i h√≤a! Kh√¥ng ai chi·∫øn th·∫Øng tr√≤ ch∆°i!',
                    timeoutMessage: 'Tr√≤ ch∆°i kh√¥ng ho√†n th√†nh! Kh√¥ng ai chi·∫øn th·∫Øng tr√≤ ch∆°i!',
                    playerOnlyMessage: 'Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y cho {player} v√† {opponent}.'
                });

                Game.startGame();
                Game.on('gameOver', result => {
                    console.log(result);  // =>  { result... }
                })
            }
                break;
        }
    }
}
